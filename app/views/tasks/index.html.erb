<div class="container">
  <p id="notice"><%= notice %></p>

  <div class="task_list_title">
    <h1>Tasks</h1>
  </div>

  <div class="taskDisplay">
    <table>
      <thead>
        <tr>
          <th style= "margin: 22px 2px; padding: 30px 50px;">Title</th>
          <th style= "margin: 22px 2px; padding: 30px 50px;">Description</th>
          <th style= "margin: 22px 2px; padding: 30px 50px;">Time</th>
          <th colspan="3"></th>
        </tr>
      </thead>

      <tbody>
        <% @tasks.each do |task| %>
          <tr>
            <td><%= task.title %></td>
            <td><%= task.description %></td>
            <td><%= task.time %> min.</td>
            <td><%= link_to 'Show', task %></td>
            <td><%= '|' %></td>
            <td><%= link_to 'Edit', edit_task_path(task) %></td>
            <td><%= '|' %></td>
            <td><%= link_to 'Delete', task, method: :delete, data: { confirm: 'Are you sure?' } %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
    <br><br>
    <div class="newT">
      <%= link_to 'New Task', new_task_path %>
    </div>
    <div class="totalTime">
      <br><br><br><br>
      <p>Total Time Needed: <%= Task.sum(:time) %> minutes</p>
    </div>
  </div>

  <br>


  <div id="travel">
    <form id="distance_form">
      <div class="form-group">

        <label style= "display:block">Origin: </label>
<br>
        <input class="form-control" id="from_places" style= "display:block; outline: none;background:rgba(250, 250, 250, 0.4);border: none;height: 40px;border-radius: 4px;padding: 1em 2em;display: block;text-align: center;position: relative;left: 75px; left: 40px; width: 262px;" placeholder="Enter a location" />

        <input id="origin" name="origin" required="" type="hidden" />
      </div>

<br>
      <div class="form-group">

        <label style= "display:block;">Destination: </label>
<br>
        <input class="form-control" id="to_places" style= "display:block; outline: none;background:rgba(250, 250, 250, 0.4);border: none;height: 40px;border-radius: 4px;padding: 1em 2em;display: block;text-align: center;position: relative;left: 75px; left: 40px; width: 262px;" placeholder="Enter a location" />

        <input id="destination" name="destination" required="" type="hidden" />
      </div>

      <br><br>

      <input class="btn btn-primary" type="submit" value="Calculate" /></form>
<br><br>
      <div id="result">
          <ul class="list-group">
            <li class="list-group-item d-flex justify-content-between align-items-center">Distance In Mile :</li>
            <span id="in_mile" class="badge badge-primary badge-pill"></span>
            <br><br>

            <li class="list-group-item d-flex justify-content-between align-items-center">IN TEXT:</li>
            <span id="duration_text" class="badge badge-primary badge-pill"></span>
            <br><br>

            <li class="list-group-item d-flex justify-content-between align-items-center">IN MINUTES:</li>
            <span id="duration_value" class="badge badge-primary badge-pill"></span>
            <br><br>

            <li class="list-group-item d-flex justify-content-between align-items-center">FROM:</li>
             <span id="from" class="badge badge-primary badge-pill"></span>
             <br><br>

            <li class="list-group-item d-flex justify-content-between align-items-center">TO:</li>
            <span id="to" class="badge badge-primary badge-pill"></span>
            <br>
          </ul>
      </div>
  </div>

  <div id="time"></div>

  <div class="countDown">
    <div>You have <span id="timer"></span> minutes left</div>
  </div>

</div>
</div>

<script>

// gets current time
    function checkTime(i) {
      if (i < 10) {
        i = "0" + i;
      }
      return i;
      }

      function startTime() {
      var today = new Date();
      var h = today.getHours();
      var m = today.getMinutes();
      var s = today.getSeconds();
      // add a zero in front of numbers<10
      m = checkTime(m);
      s = checkTime(s);
      document.getElementById('time').innerHTML = h + ":" + m + ":" + s;
      t = setTimeout(function() {
        startTime()
      }, 500);
      }
      startTime();

// countdown timer
      var cD = <%= Task.sum(:time) %>
      // var t = duration_value;

        document.getElementById('timer').innerHTML =
        cD + ":" + 00;
      startTimer();

      function startTimer() {
        var presentTime = document.getElementById('timer').innerHTML;
        var timeArray = presentTime.split(/[:]+/);
        var m = timeArray[0];
        var s = checkSecond((timeArray[1] - 1));
        if(s==59){m=m-1}
        // if(m<0){alert('timer completed')}

        document.getElementById('timer').innerHTML =
          m + ":" + s;
        setTimeout(startTimer, 1000);
      }

      function checkSecond(sec) {
        if (sec < 10 && sec >= 0) {sec = "0" + sec}; // add zero in front of numbers < 10
        if (sec < 0) {sec = "59"};
        return sec;
      }

// google apis
$(function() {
    // add input listeners
    google.maps.event.addDomListener(window, 'load', function () {
        var from_places = new google.maps.places.Autocomplete(document.getElementById('from_places'));
        var to_places = new google.maps.places.Autocomplete(document.getElementById('to_places'));

        google.maps.event.addListener(from_places, 'place_changed', function () {
            var from_place = from_places.getPlace();
            var from_address = from_place.formatted_address;
            $('#origin').val(from_address);
        });

        google.maps.event.addListener(to_places, 'place_changed', function () {
            var to_place = to_places.getPlace();
            var to_address = to_place.formatted_address;
            $('#destination').val(to_address);
        });

    });
    // calculate distance
    function calculateDistance() {
        var origin = $('#origin').val();
        var destination = $('#destination').val();
        var service = new google.maps.DistanceMatrixService();
        service.getDistanceMatrix(
            {
                origins: [origin],
                destinations: [destination],
                travelMode: google.maps.TravelMode.DRIVING,
                unitSystem: google.maps.UnitSystem.IMPERIAL, // miles and feet.
                // unitSystem: google.maps.UnitSystem.metric, // kilometers and meters.
                avoidHighways: false,
                avoidTolls: false
            }, callback);
    }
    // get distance results
    function callback(response, status) {
        if (status != google.maps.DistanceMatrixStatus.OK) {
            $('#result').html(err);
        } else {
            var origin = response.originAddresses[0];
            var destination = response.destinationAddresses[0];
            if (response.rows[0].elements[0].status === "ZERO_RESULTS") {
                $('#result').html("Better get on a plane. There are no roads between "  + origin + " and " + destination);
            } else {
                var distance = response.rows[0].elements[0].distance;
                var duration = response.rows[0].elements[0].duration;
                console.log(response.rows[0].elements[0].distance);
                var distance_in_kilo = distance.value / 1000; // the kilom
                var distance_in_mile = distance.value / 1609.34; // the mile
                var duration_text = duration.text;
                var duration_value = duration.value;
                $('#in_mile').text(distance_in_mile.toFixed(2));
                $('#in_kilo').text(distance_in_kilo.toFixed(2));
                $('#duration_text').text(duration_text);
                $('#duration_value').text(duration_value);
                $('#from').text(origin);
                $('#to').text(destination);
            }
        }
    }
    // print results on submit the form
    $('#distance_form').submit(function(e){
        e.preventDefault();
        calculateDistance();
    });

});
</script>
