<div class="container">
  <p id="notice"><%= notice %></p>

  <div class="task_list_title">
    <h1>Tasks</h1>
  </div>



<div id="roboAI">
      <script src="https://cdnjs.cloudflare.com/ajax/libs/prefixfree/1.0.7/prefixfree.min.js"></script>
    <main class="bot-wrapper centered">
    <div id="bot">
      <bot-ui></bot-ui>
    </div>
    </main>
    <script src='https://cdn.jsdelivr.net/vue/latest/vue.min.js'></script>
    <script src='https://unpkg.com/botui/build/botui.min.js'></script>
</div>


<!-- codepen alarm clock -->
<div id='main-container'>
			<h2 id='clock'></h2>
		</div>

		<div id='alarm-container'>
			<!-- <h3>Set Alarm Time</h3> -->
				<label>
					<div>
					<select id='alarmhrs' ></select>
					</div>
				</label>
				<label>
					<div>
					<select id='alarmmins' ></select>
					</div>
				</label>
				<label>
					<div>
					<select id='alarmsecs' ></select>
					</div>
				</label>
				<label>
					<div>
						<select id="ampm">
							<option value="AM">AM</option>
							<option value="PM">PM</option>
						</select>
					</div>
				</label>
				</div>
		</div>

		<div id='buttonHolder'>
			<div>
				<button  id='setButton' onClick='alarmSet()'>Set Alarm</button>
			</div>

			<div>
				<button  id='clearButton' onClick='alarmClear()'>Stop Alarm</button>
			</div>
		</div>





<!-- task display block -->


  <div class="taskDisplay">
    <table>
      <thead>
        <tr>
          <th style= "margin: 22px 2px; padding: 30px 50px;">Title</th>
          <th style= "margin: 22px 2px; padding: 30px 50px;">Description</th>
          <th style= "margin: 22px 2px; padding: 30px 50px;">Time</th>
          <th colspan="3"></th>
        </tr>
      </thead>

      <tbody>
        <% @tasks.each do |task| %>
          <tr>
            <td><%= task.title %></td>
            <td><%= task.description %></td>
            <td><%= task.time %> min.</td>
            <!-- <td><%= link_to 'Show', task %></td>
            <td><%= '|' %></td>
            <td><%= link_to 'Edit', edit_task_path(task) %></td> -->
            <td><%= '|' %></td>
            <td class="remove-task-btn"><%= link_to 'Delete', task, method: :delete, remote: true, data: { confirm: 'Are you sure?' } %></td>
            <td><%= '|' %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
    <br><br>


<!-- new task -->

    <div class="newT">
      <%= form_with(model: @task, remote: true) do |form| %>


        <div class="field">
          <%= form.label :title %>
          <%= form.text_field :title %>
        </div>

        <div class="field">
          <%= form.label :description %>
          <%= form.text_area :description %>
        </div>

        <div class="field">
          <%= form.label :time %>
          <%= form.number_field :time %>
          <p><em>(in minutes)</em></p>
        </div>
      <br>
        <div class="actions">
          <%= form.submit %>
        </div>
      <% end %>
    </div>

  </div>

  <br>

<!-- google api -->
  <div id="travel">
    <form id="distance_form">
      <div class="form-group">

        <label style= "display:block">Origin: </label>
        <br>
        <input class="form-control" id="from_places" style= "display:block; outline: none;background:rgba(250, 250, 250, 0.4);border: none;height: 40px;border-radius: 4px;padding: 1em 2em;display: block;text-align: center;position: relative;left: 75px; left: 260px; width: 262px;" placeholder="Enter a location" />

        <input id="origin" name="origin" required="" type="hidden" />
      </div>

      <br>
      <div class="form-group">

        <label style= "display:block;">Destination: </label>
        <br>
        <input class="form-control" id="to_places" style= "display:block; outline: none;background:rgba(250, 250, 250, 0.4);border: none;height: 40px;border-radius: 4px;padding: 1em 2em;display: block;text-align: center;position: relative;left: 75px; left: 260px; width: 262px;" placeholder="Enter a location" />

        <input id="destination" name="destination" required="" type="hidden" />
      </div>

      <br><br>

      <input class="btn btn-primary" type="submit" value="Calculate" /></form>
      <br><br>
      <div id="result">
          <ul class="list-group">
            <li class="list-group-item d-flex justify-content-between align-items-center">Distance In Mile :</li>
            <span id="in_mile" class="badge badge-primary badge-pill"></span>
            <br><br>

            <li class="list-group-item d-flex justify-content-between align-items-center">IN TEXT:</li>
            <span id="duration_text" class="badge badge-primary badge-pill"></span>
            <br><br>

            <!-- <li class="list-group-item d-flex justify-content-between align-items-center">IN MINUTES:</li>
            <span id="duration_value" class="badge badge-primary badge-pill"></span>
            <br><br> -->

            <li class="list-group-item d-flex justify-content-between align-items-center">FROM:</li>
             <span id="from" class="badge badge-primary badge-pill"></span>
             <br><br>

            <li class="list-group-item d-flex justify-content-between align-items-center">TO:</li>
            <span id="to" class="badge badge-primary badge-pill"></span>
            <br>
          </ul>
      </div>
  </div>


<div class="clocks">
      <div id="ticktock"></div>
        <br>
      <div class="countDown">
        <div>You have <span id="timer"></span> minutes left</div>
      </div>

      <p style= "position:  relative;top: -867px;left: 46%;">Total Time Needed: <%= Task.sum(:time) %> minutes</p>

		</div>

        </div>
    </div>

  </div>
</div>


<!-- weather // tryenlight.github.io/demo/weather-project/ -->

<div class="weather">
  <h1><div id="temp"></div><div id="minutely"></div></h1>
  <h2><div id="location"></div></h2>
</div>

<!-- embed youtube playlist -->

<iframe id="player" width="854" height="480" src="https://www.youtube.com/embed/IcrbM1l_BoI?list=RDQMSvh1AbADqQE&autoplay=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


<!-- daily quotes -->

<div class="quotes">
  <div id="container">
    <h2>Get Your Daily Quote</h2>
      <div id="quoteContainer">
        <p></p>
        <p id="quoteGenius"></p>
      </div><!--end quoteContainer-->

      <div id="buttonContainer">
        <a href="#" id="quoteButton">Quote Me</a>
    </div><!--end buttonContainer-->
  </div>
</div>


<script>

// alarm clock
var sound = new Audio("https://www.freespecialeffects.co.uk/soundfx/music/fanfare3.wav");
		sound.loop = true;

// var h2 = document.getElementById('clock');

// display current time by the second
var currentTime = setInterval(function(){
	var date = new Date();

	var hours = (12 - (date.getHours()));
	// var hours = date.getHours();

	var minutes = date.getMinutes();

	var seconds = date.getSeconds();

	var ampm = (date.getHours()) < 12 ? 'AM' : 'PM';


	//convert military time to standard time

	if (hours < 0) {
		hours = hours * -1;
	} else if (hours == 00) {
		hours = 12;
	} else {
		hours = hours;
	}


	// h2.textContent = addZero(hours) + ":" + addZero(minutes) + ":" + addZero(seconds) + "" + ampm;

},1000);


/*functions to get hour, min, secs,
  am or pm, add zero, set alarm time and sound, clear alarm
*/

function addZero(time) {

		return (time < 10) ? "0" + time : time;

}

function hoursMenu(){

	var select = document.getElementById('alarmhrs');
	var hrs = 12

	for (i=1; i <= hrs; i++) {
		select.options[select.options.length] = new Option( i < 10 ? "0" + i : i, i);

	}
}
hoursMenu();

function minMenu(){

	var select = document.getElementById('alarmmins');
	var min = 59;

	for (i=0; i <= min; i++) {
		select.options[select.options.length] = new Option(i < 10 ? "0" + i : i, i);
	}
}
minMenu();

function secMenu(){

	var select = document.getElementById('alarmsecs');
	var sec = 59;

	for (i=0; i <= sec; i++) {
		select.options[select.options.length] = new Option(i < 10 ? "0" + i : i, i);
	}
}
secMenu();


function alarmSet() {

	var hr = document.getElementById('alarmhrs');

	var min = document.getElementById('alarmmins');

	var sec = document.getElementById('alarmsecs');

	var ap = document.getElementById('ampm');


    var selectedHour = hr.options[hr.selectedIndex].value;
    var selectedMin = min.options[min.selectedIndex].value;
    var selectedSec = sec.options[sec.selectedIndex].value;
    var selectedAP = ap.options[ap.selectedIndex].value;

    var alarmTime = addZero(selectedHour) + ":" + addZero(selectedMin) + ":" + addZero(selectedSec) + selectedAP;
    console.log('alarmTime:' + alarmTime);

  document.getElementById('alarmhrs').disabled = true;
	document.getElementById('alarmmins').disabled = true;
	document.getElementById('alarmsecs').disabled = true;
	document.getElementById('ampm').disabled = true;


//when alarmtime is equal to currenttime then play a sound
	var h2 = document.getElementById('clock');

/*function to calcutate the current time
then compare it to the alarmtime and play a sound when they are equal
*/

setInterval(function(){

	var date = new Date();

	var hours = (12 - (date.getHours()));
	// var hours = date.getHours();

	var minutes = date.getMinutes();

	var seconds = date.getSeconds();

	var ampm = (date.getHours()) < 12 ? 'AM' : 'PM';


	//convert military time to standard time

	if (hours < 0) {
		hours = hours * -1;
	} else if (hours == 00) {
		hours = 12;
	} else {
		hours = hours;
	}

	var currentTime = addZero(hours) + ":" + addZero(minutes) + ":" + addZero(seconds) + "" + ampm;


	if (alarmTime == currentTime) {
		sound.play();
		}

},1000);


	console.log('currentTime:' + currentTime);

}


function alarmClear() {

	document.getElementById('alarmhrs').disabled = false;
	document.getElementById('alarmmins').disabled = false;
	document.getElementById('alarmsecs').disabled = false;
	document.getElementById('ampm').disabled = false;
	sound.pause();
}




// quotes


$(document).ready(function(){
		var quoteSource=[
		{
			quote: "Start by doing what's necessary; then do what's possible; and suddenly you are doing the impossible.",
			name:"Francis of Assisi"
	    },
	    {
	    	quote:"Believe you can and you're halfway there.",
	    	name:"Theodore Roosevelt"
	    },
	    {
	    	quote:"It does not matter how slowly you go as long as you do not stop.",
	    	name:"Confucius"
	    },
	    {
	    	quote:"Our greatest weakness lies in giving up. The most certain way to succeed is always to try just one more time.",
	    	name:"Thomas A. Edison"
	    },
	    {
	    	quote:"The will to win, the desire to succeed, the urge to reach your full potential... these are the keys that will unlock the door to personal excellence.",
	    	name:"Confucius"
	    },
	    {
	    	quote:"Don't watch the clock; do what it does. Keep going.",
	    	name:"Sam Levenson"
	    },
	    {
	    	quote:"A creative man is motivated by the desire to achieve, not by the desire to beat others.",
	    	name:"Ayn Rand"
	    },
	    {
	    	quote:"A creative man is motivated by the desire to achieve, not by the desire to beat others.",
	    	name:"Ayn Rand"
	    },
	    {
	    	quote:"Expect problems and eat them for breakfast.",
	    	name:"Alfred A. Montapert"
	    },
	    {
	    	quote:"Start where you are. Use what you have. Do what you can.",
	    	name:"Arthur Ashe"
	    },
	    {
	    	quote:"Ever tried. Ever failed. No matter. Try Again. Fail again. Fail better.",
	    	name:"Samuel Beckett"
	    },
	    {
	    	quote:"Be yourself; everyone else is already taken.",
	    	name:"Oscar Wilde"
	    },
	    {
	    	quote:"Two things are infinite: the universe and human stupidity; and I'm not sure about the universe.",
	    	name:"Albert Einstein"
	    },
	    {
	    	quote:"Always remember that you are absolutely unique. Just like everyone else.",
	    	name:"Margaret Mead"
	    },
	    {
	    	quote:"Do not take life too seriously. You will never get out of it alive.",
	    	name:"Elbert Hubbard"
	    },
	    {
	    	quote:"People who think they know everything are a great annoyance to those of us who do.",
	    	name:"Isaac Asimov"
	    },
	    {
	    	quote:"Procrastination is the art of keeping up with yesterday.",
	    	name:"Don Marquis"
	    },
	    {
	    	quote:"Get your facts first, then you can distort them as you please.",
	    	name:"Mark Twain"
	    },
	    {
	    	quote:"A day without sunshine is like, you know, night.",
	    	name:"Steve Martin"
	    },
	    {
	    	quote:"My grandmother started walking five miles a day when she was sixty. She's ninety-seven now, and we don't know where the hell she is.",
	    	name:"Ellen DeGeneres"
	    },
      {
        quote:"Life is 10% what happens to me and 90% of how I react to it.",
        name:"Charles Swindoll"
      },
      {
        quote:"I can’t change the direction of the wind, but I can adjust my sails to always reach my destination.",
        name:"Jimmy Dean"
      },
      {
        quote:"Do or do not. There is no try.",
        name:"Yoda"
      },
	    {
	    	quote:"Don't sweat the petty things and don't pet the sweaty things.",
	    	name:"George Carlin"
	    },
      {
       quote:"I’ve learned that people will forget what you said, people will forget what you did, but people will never forget how you made them feel.",
       name:"Maya Angelou"
      },
	    {
	    	quote:"Always do whatever's next.",
	    	name:"George Carlin"
	    },
	    {
	    	quote:"Nothing is impossible, the word itself says “I'm possible",
	    	name:"Audrey Hepburn"
	    },
	    {
	    	quote:"Hapiness is not something ready made. It comes from your own actions.",
	    	name:"Dalai Lama"
	    }

	];


		$('#quoteButton').click(function(evt){
			//define the containers of the info we target
			var quote = $('#quoteContainer p').text();
			var quoteGenius = $('#quoteGenius').text();
			//prevent browser's default action
			evt.preventDefault();
			//getting a new random number to attach to a quote and setting a limit
			var sourceLength = quoteSource.length;
			var randomNumber= Math.floor(Math.random()*sourceLength);
			//set a new quote
			for(i=0;i<=sourceLength;i+=1){
			var newQuoteText = quoteSource[randomNumber].quote;
			var newQuoteGenius = quoteSource[randomNumber].name;
			//console.log(newQuoteText,newQuoteGenius);
      var timeAnimation = 500;
      var quoteContainer = $('#quoteContainer');
      //fade out animation with callback
      quoteContainer.fadeOut(timeAnimation, function(){
        quoteContainer.html('');
				quoteContainer.append('<p>'+newQuoteText+'</p>'+'<p id="quoteGenius">'+'-								'+newQuoteGenius+'</p>');

        //fadein animation.
        quoteContainer.fadeIn(timeAnimation);
      });

			break;
		};//end for loop

	});//end quoteButton function
  $.getJSON("https://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=1&callback=", function(a) {
    // $("body").append(a[0].content + "<p>&mdash; " + a[0].title + "</p>")
  });
});//end document ready





// get current weather

function weather() {

  var location = document.getElementById("location");
  var apiKey = '6d3121a0caf68b6895851267a48e16c6'; // MY API KEY
  var url = 'https://api.forecast.io/forecast/';

  navigator.geolocation.getCurrentPosition(success, error);

  function success(position) {
    latitude = position.coords.latitude;
    longitude = position.coords.longitude;

    location.innerHTML = 'Latitude is ' + latitude + '° <br> Longitude is ' + longitude + '°';

     $.getJSON(url + apiKey + "/" + latitude + "," + longitude + "?callback=?", function(data) {
      $('#temp').html(data.currently.temperature + '° F');
      $('#minutely').html(data.minutely.summary);
    });
  }

  function error() {
    location.innerHTML = "Unable to retrieve your location";
  }

  location.innerHTML = "Locating...";
}

weather();





// gets current time
    function checkTime(i) {
      if (i < 10) {
        i = "0" + i;
      }
      return i;
      }

      function startTime() {
      var today = new Date();
      var h = today.getHours();
      var m = today.getMinutes();
      var s = today.getSeconds();
      // add a zero in front of numbers<10
      m = checkTime(m);
      s = checkTime(s);
      document.getElementById('ticktock').innerHTML = h + ":" + m + ":" + s;
      t = setTimeout(function() {
        startTime()
      }, 500);
      }
      startTime();



// countdown timer
      var cD = <%= Task.sum(:time) %>
      // var t = duration_value;
      var pageLoadTime = new Date();

        document.getElementById('timer').innerHTML =
        cD + ":" + 00;
      startTimer();

      function startTimer() {
        var presentTime = document.getElementById('timer').innerHTML;
        var timeArray = presentTime.split(/[:]+/);
        var m = timeArray[0];
        var s = checkSecond((timeArray[1] - 1));
        if(s==59){m=m-1}
        // if(m<0){alert('timer completed')}

        document.getElementById('timer').innerHTML =
          m + ":" + s;
        setTimeout(startTimer, 1000);
      }

      function checkSecond(sec) {
        if (sec < 10 && sec >= 0) {sec = "0" + sec}; // add zero in front of numbers < 10
        if (sec < 0) {sec = "59"};
        return sec;
      }




// google apis

$(function() {
    // add input listeners
    google.maps.event.addDomListener(window, 'load', function () {
        var from_places = new google.maps.places.Autocomplete(document.getElementById('from_places'));
        var to_places = new google.maps.places.Autocomplete(document.getElementById('to_places'));

        google.maps.event.addListener(from_places, 'place_changed', function () {
            var from_place = from_places.getPlace();
            var from_address = from_place.formatted_address;
            $('#origin').val(from_address);
        });

        google.maps.event.addListener(to_places, 'place_changed', function () {
            var to_place = to_places.getPlace();
            var to_address = to_place.formatted_address;
            $('#destination').val(to_address);
        });

    });
    // calculate distance
    function calculateDistance() {
        var origin = $('#origin').val();
        var destination = $('#destination').val();
        var service = new google.maps.DistanceMatrixService();
        service.getDistanceMatrix(
            {
                origins: [origin],
                destinations: [destination],
                travelMode: google.maps.TravelMode.DRIVING,
                unitSystem: google.maps.UnitSystem.IMPERIAL, // miles and feet.
                // unitSystem: google.maps.UnitSystem.metric, // kilometers and meters.
                avoidHighways: false,
                avoidTolls: false
            }, callback);
    }
    // get distance results
    function callback(response, status) {
        if (status != google.maps.DistanceMatrixStatus.OK) {
            $('#result').html(err);
        } else {
            var origin = response.originAddresses[0];
            var destination = response.destinationAddresses[0];
            if (response.rows[0].elements[0].status === "ZERO_RESULTS") {
                $('#result').html("Better get on a plane. There are no roads between "  + origin + " and " + destination);
            } else {
                var distance = response.rows[0].elements[0].distance;
                var duration = response.rows[0].elements[0].duration;
                console.log(response.rows[0].elements[0].distance);
                var distance_in_kilo = distance.value / 1000; // the kilom
                var distance_in_mile = distance.value / 1609.34; // the mile
                var duration_text = duration.text;
                var duration_value = duration.value;

                var newTimeLeft = Math.ceil(cD - (duration.value / 60) - (Date.now() - pageLoadTime.getTime()) / 60000);
                document.getElementById('timer').innerHTML = newTimeLeft + ":" + "00";

                $('#in_mile').text(distance_in_mile.toFixed(2));
                $('#in_kilo').text(distance_in_kilo.toFixed(2));
                $('#duration_text').text(duration_text);
                $('#duration_value').text(duration_value);
                $('#from').text(origin);
                $('#to').text(destination);
            }
        }
    }
    // print results on submit the form
    $('#distance_form').submit(function(e){
        e.preventDefault();
        calculateDistance();
    });

});




//Good morning texting-like robot below

var botui = new BotUI("bot"); // give it the id of container

botui.message.bot({
	// show first message
	delay: 500,
	content: "Good Morning ",
	loading: true // fake typing
}).then(function () {
	return botui.message.bot({
		// second one
		delay: 500,
		loading: true,
		content: "How are you feeling?"
	});
}).then(function () {
	return botui.action.button({
		// let user choose something
		delay: 300,
		action: [{
			text: "Okay",
			value: "Okay"
		}, {
			text: "Good",
			value: "Good"
		}, {
			text: "Awesome",
			value: "Awesome"
		}, {
			text: "Amazing!",
			value: "awfully_good"
		}]
	});
}).then(function (res) {
	return botui.message.bot({
		delay: 400,
		loading: true, // pretend like we are doing something
		content: "Glad you're feeling " + res.text.toLowerCase() + "!"
	});
}).then(function () {
	botui.message.bot({
		delay: 700,
		loading: true,
		content: "How did you sleep?"
	}).then(function () {
		return botui.action.text({
			delay: 400,
			action: {
				size: 18,
				icon: "user-circle-o",
				sub_type: "text",
				placeholder: "Well? Hard?"
			}
		});
	}).then(function (res) {
		name = res.value; // save new value
		return botui.message.bot({
			delay: 300,
			loading: true,
			content: "Let's start this morning off positive!"
		});
	}).then(function (res) {
		name = res.value; // save new value
		return botui.message.bot({
			delay: 300,
			loading: true,
			content: "What's something you're thankful for?"
		});
	}).then(function () {
  	return botui.action.button({
  		// let user choose something
  		delay: 300,
  		action: [{
  			text: "Waking up today",
  			value: "be alive"
  		}, {
  			text: "Feeling loved",
  			value: "feel loved"
  		}, {
  			text: "Having a home",
  			value: "have a home"
  		}, {
  			text: "Having a family!",
  			value: "have a family"
  		}]
  	});
  }).then(function (res) {
  	return botui.message.bot({
  		delay: 400,
  		loading: true, // pretend like we are doing something
  		content: "Isn't " + res.text.toLowerCase() + " great! "
  	});
  }).then(function (res) {
		name = res.value; // save new value
		return botui.message.bot({
			delay: 300,
			loading: true,
			content: "Better get a move on now. Don't want to be late!"  + "! ![hello image](https://media1.tenor.com/images/a9b3e91e8db7b177b0e3fa7c67a2ecfa/tenor.gif?itemid=4710146)"
		});
  });
});


// speech ai

if (annyang) {
  // Let's define a command.
  var commands = {
    'good morning timothy': function() { var msg = new SpeechSynthesisUtterance('Good morning, Autumn');
    window.speechSynthesis.speak(msg); }
  };

  // Add our commands to annyang
  annyang.addCommands(commands);

  // Start listening.
  annyang.start();
}

if (annyang) {
  // Let's define a command.
  var commands = {
    'what time is it': function() { var msg = new SpeechSynthesisUtterance('Its blank oclock');
    window.speechSynthesis.speak(msg); }
  };

  // Add our commands to annyang
  annyang.addCommands(commands);

  // Start listening.
  annyang.start();
}

if (annyang) {
  // Let's define a command.
  var commands = {
    'how much time is left': function() { var msg = new SpeechSynthesisUtterance('All the time in the world');
    window.speechSynthesis.speak(msg); }
  };

  // Add our commands to annyang
  annyang.addCommands(commands);

  // Start listening.
  annyang.start();
}

if (annyang) {
  // Let's define a command.
  var commands = {
    'thank you': function() { var msg = new SpeechSynthesisUtterance('Your very welcome');
    window.speechSynthesis.speak(msg); }
  };

  // Add our commands to annyang
  annyang.addCommands(commands);

  // Start listening.
  annyang.start();
}

if (annyang) {
  // Let's define a command.
  var commands = {
    'say hello to the class timothy': function() { var msg = new SpeechSynthesisUtterance('hello everyone');
    window.speechSynthesis.speak(msg); }
  };

  // Add our commands to annyang
  annyang.addCommands(commands);

  // Start listening.
  annyang.start();
}

if (annyang) {
  // Let's define a command.
  var commands = {
    'cool': function() { var msg = new SpeechSynthesisUtterance('yes, very cool');
    window.speechSynthesis.speak(msg); }
  };

  // Add our commands to annyang
  annyang.addCommands(commands);

  // Start listening.
  annyang.start();
}

if (annyang) {
  // Let's define a command.
  var commands = {
    'nevermind': function() { var msg = new SpeechSynthesisUtterance('okay');
    window.speechSynthesis.speak(msg); }
  };

  // Add our commands to annyang
  annyang.addCommands(commands);

  // Start listening.
  annyang.start();
}

if (annyang) {
  // Let's define a command.
  var commands = {
    'explain the app': function() { var msg = new SpeechSynthesisUtterance('this app is designed to make your mornings easier, by putting everything you need to stay on time, right at your fingertips');
    window.speechSynthesis.speak(msg); }
  };

  // Add our commands to annyang
  annyang.addCommands(commands);

  // Start listening.
  annyang.start();
}

if (annyang) {
  // Let's define a command.
  var commands = {
    'explain further': function() { var msg = new SpeechSynthesisUtterance('the weather, for example, is right here, so you know exactly how to dress for the day');
    window.speechSynthesis.speak(msg); }
  };

  // Add our commands to annyang
  annyang.addCommands(commands);

  // Start listening.
  annyang.start();
}

if (annyang) {
  // Let's define a command.
  var commands = {
    'go on': function() { var msg = new SpeechSynthesisUtterance('I also take into account traveling time and distance, to make sure you have plenty of time to get to where you need to go on time.');
    window.speechSynthesis.speak(msg); }
  };

  // Add our commands to annyang
  annyang.addCommands(commands);

  // Start listening.
  annyang.start();
}

if (annyang) {
  // Let's define a command.
  var commands = {
    'timothy': function() { var msg = new SpeechSynthesisUtterance('yes?');
    window.speechSynthesis.speak(msg); }
  };

  // Add our commands to annyang
  annyang.addCommands(commands);

  // Start listening.
  annyang.start();
}

if (annyang) {
  // Let's define a command.
  var commands = {
    'hello?': function() { var msg = new SpeechSynthesisUtterance('hello');
    window.speechSynthesis.speak(msg); }
  };

  // Add our commands to annyang
  annyang.addCommands(commands);

  // Start listening.
  annyang.start();
}

</script>
